{
    "docs": [
        {
            "location": "/", 
            "text": "LISA Api is a core component of LISA. It's based on Django Rest Framework that makes it easy to build Web APIs for almost everything.\n\n\nThe API was made to provide an easy bridge between custom home automation devices which are not zwave or having a common protocol.\nIf your device can be reach and used by python, so you can expose a http endpoint and it will be useable by your home automation box.\n\n\nSome key features :\n\n Highly customizable, you can easily override native functions using your plugins\n\n Plugins are easy to write, and can be auto-generated\n\n Plugins can provide a generic interface to let other plugins plug on them\n\n Plugins dependancies\n* Auto-generated documentation\n\n\n\n\nRequirements\n\n\nREST framework requires the following:\n\n\n\n\nPython (2.7, 3.4)\n\n\nDjango (1.8)\n\n\nDjango Rest Framework\n\n\nPIP\n\n\nDjango Rest Swagger\n\n\nStevedore\n\n\nColorlog\n\n\nKombu\n\n\nRequests\n\n\n\n\nInstallation\n\n\nInstall using \npip\n, including any optional packages you want...\n\n\npip install lisa-api\n\n\n\n...or clone the project from github.\n\n\ngit clone git@github.com:project-lisa/lisa-api.git\n\n\n\nCreate the MySQL user\n\n\ngrant all privileges on lisa_api.* to 'lisa_api'@'localhost' identified by 'lisapassword';\n\n\n\nCreate a configuration file\n\n\nsudo mkdir -p /etc/lisa/conf/\nlisa-api-cli configuration save --filename /etc/lisa/conf/lisa_api.ini\n\n\n\nYou can of course edit these configuration parameters following your needs\n\n\nCreate your super-user\n\n\nlisa-api-cli createsuperuser\n\n\n\nThen launch the lisa-api webserver\n\n\nlisa-api-cli runserver 0.0.0.0:8000\n\n\n\nYou can now access it in your browser by loging in before at \nhttp://127.0.0.1:8000/api-auth/login/\n\n\nhttp://localhost:8000/docs/\n\n\n\nQuickstart\n\n\nCan't wait to get started? The \nquickstart guide\n is the fastest way to get up and running, and creating plugins.\n\n\nDevelopment\n\n\nSee the \nContribution guidelines\n for information on how to clone\nthe repository, run the test suite and contribute changes back to LISA API.\n\n\nSupport\n\n\nFor support please see the \nask website\n, try the channel on \ngitter\n\n\nLicense\n\n\nCopyright (c) 2015, Julien Syx\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following\ndisclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the distribution.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "Home"
        }, 
        {
            "location": "/#requirements", 
            "text": "REST framework requires the following:   Python (2.7, 3.4)  Django (1.8)  Django Rest Framework  PIP  Django Rest Swagger  Stevedore  Colorlog  Kombu  Requests", 
            "title": "Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "Install using  pip , including any optional packages you want...  pip install lisa-api  ...or clone the project from github.  git clone git@github.com:project-lisa/lisa-api.git  Create the MySQL user  grant all privileges on lisa_api.* to 'lisa_api'@'localhost' identified by 'lisapassword';  Create a configuration file  sudo mkdir -p /etc/lisa/conf/\nlisa-api-cli configuration save --filename /etc/lisa/conf/lisa_api.ini  You can of course edit these configuration parameters following your needs  Create your super-user  lisa-api-cli createsuperuser  Then launch the lisa-api webserver  lisa-api-cli runserver 0.0.0.0:8000  You can now access it in your browser by loging in before at  http://127.0.0.1:8000/api-auth/login/  http://localhost:8000/docs/", 
            "title": "Installation"
        }, 
        {
            "location": "/#quickstart", 
            "text": "Can't wait to get started? The  quickstart guide  is the fastest way to get up and running, and creating plugins.", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#development", 
            "text": "See the  Contribution guidelines  for information on how to clone\nthe repository, run the test suite and contribute changes back to LISA API.", 
            "title": "Development"
        }, 
        {
            "location": "/#support", 
            "text": "For support please see the  ask website , try the channel on  gitter", 
            "title": "Support"
        }, 
        {
            "location": "/#license", 
            "text": "Copyright (c) 2015, Julien Syx\nAll rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:    Redistributions of source code must retain the above copyright notice, this list of conditions and the following\ndisclaimer.    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the distribution.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/tutorial/quickstart/", 
            "text": "Quickstart", 
            "title": "Quickstart"
        }, 
        {
            "location": "/tutorial/quickstart/#quickstart", 
            "text": "", 
            "title": "Quickstart"
        }, 
        {
            "location": "/topics/internationalization/", 
            "text": "Internationalization\n\n\nLISA ships with translatable error messages.\n\n\n\n\nSelect a language other than English as the default, using the \nlang_django\n setting in configuration file.\n\n\nAllow clients to choose a language themselves. A typical usage for API clients would be to include an \nAccept-Language\n request header.\n\n\n\n\nEnabling internationalized APIs\n\n\nYou can change the default language by using the \nlang_django\n setting in LISA API configuration file:\n\n\nlang_django = \"es-es\"\n\n\n\nBy default, the per-request language requests is enabled, so client requests will respect the \nAccept-Language\n header where possible. For example, let's make a request for an unsupported media type:\n\n\nRequest\n\n\nGET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org\n\n\n\nResponse\n\n\nHTTP/1.0 406 NOT ACCEPTABLE\n\n{\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"}\n\n\n\nLISA includes these built-in translations both for standard exception cases, and for serializer validation errors.\n\n\nNote that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example \n400 Bad Request\n response body might look like this:\n\n\n{\"detail\": {\"username\": [\"Esse campo deve ser unico.\"]}}\n\n\n\nAdding new translations\n\n\nLISA translations are managed online using \nTransifex\n. You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the LISA package.\n\n\nTranslating a new language locally\n\n\nThis guide assumes you are already familiar with how to translate a Django app.  If you're not, start by reading \nDjango's translation docs\n.\n\n\nIf you're translating a new language you'll need to translate the existing LISA error messages:\n\n\n\n\n\n\nMake a new folder where you want to store the internationalization resources. Add this path to your \nLOCALE_PATHS\n setting.\n\n\n\n\n\n\nNow create a subfolder for the language you want to translate. The folder should be named using \nlocale name\n notation. For example: \nde\n, \npt_BR\n, \nes_AR\n.\n\n\n\n\n\n\nNow copy the \nbase translations file\n from the LISA source code into your translations folder.\n\n\n\n\n\n\nEdit the \nlisa_api.po\n file you've just copied, translating all the error messages.\n\n\n\n\n\n\nRun \nlisa-api-cli compilemessages -l pt_BR\n to make the translations \navailable for Django to use. You should see a message like \nprocessing file lisa_api.po in \n...\n/locale/pt_BR/LC_MESSAGES\n.\n\n\n\n\n\n\nRestart your development server to see the changes take effect.\n\n\n\n\n\n\nIf you're only translating custom error messages that exist inside your project codebase you don't need to copy the LISA source \nlisa_api.po\n file into a \nLOCALE_PATHS\n folder, and can instead simply run Django's standard \nmakemessages\n process.\n\n\nHow the language is determined\n\n\nYou can find more information on how the language preference is determined in the \nDjango documentation\n. For reference, the method is:\n\n\n\n\nFirst, it looks for the language prefix in the requested URL.\n\n\nFailing that, it looks for the \nLANGUAGE_SESSION_KEY\n key in the current user\u2019s session.\n\n\nFailing that, it looks for a cookie.\n\n\nFailing that, it looks at the \nAccept-Language\n HTTP header.\n\n\nFailing that, it uses the global \nLANGUAGE_CODE\n setting which is defined in the LISA configuration file with the \nlang_django\n setting.\n\n\n\n\nFor API clients the most appropriate of these will typically be to use the \nAccept-Language\n header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an \nAccept-Language\n header for API clients rather than using language URL prefixes.", 
            "title": "Internationalization"
        }, 
        {
            "location": "/topics/internationalization/#internationalization", 
            "text": "LISA ships with translatable error messages.   Select a language other than English as the default, using the  lang_django  setting in configuration file.  Allow clients to choose a language themselves. A typical usage for API clients would be to include an  Accept-Language  request header.", 
            "title": "Internationalization"
        }, 
        {
            "location": "/topics/internationalization/#enabling-internationalized-apis", 
            "text": "You can change the default language by using the  lang_django  setting in LISA API configuration file:  lang_django = \"es-es\"  By default, the per-request language requests is enabled, so client requests will respect the  Accept-Language  header where possible. For example, let's make a request for an unsupported media type:  Request  GET /api/users HTTP/1.1\nAccept: application/xml\nAccept-Language: es-es\nHost: example.org  Response  HTTP/1.0 406 NOT ACCEPTABLE\n\n{\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"}  LISA includes these built-in translations both for standard exception cases, and for serializer validation errors.  Note that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example  400 Bad Request  response body might look like this:  {\"detail\": {\"username\": [\"Esse campo deve ser unico.\"]}}", 
            "title": "Enabling internationalized APIs"
        }, 
        {
            "location": "/topics/internationalization/#adding-new-translations", 
            "text": "LISA translations are managed online using  Transifex . You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the LISA package.  Translating a new language locally  This guide assumes you are already familiar with how to translate a Django app.  If you're not, start by reading  Django's translation docs .  If you're translating a new language you'll need to translate the existing LISA error messages:    Make a new folder where you want to store the internationalization resources. Add this path to your  LOCALE_PATHS  setting.    Now create a subfolder for the language you want to translate. The folder should be named using  locale name  notation. For example:  de ,  pt_BR ,  es_AR .    Now copy the  base translations file  from the LISA source code into your translations folder.    Edit the  lisa_api.po  file you've just copied, translating all the error messages.    Run  lisa-api-cli compilemessages -l pt_BR  to make the translations \navailable for Django to use. You should see a message like  processing file lisa_api.po in  ... /locale/pt_BR/LC_MESSAGES .    Restart your development server to see the changes take effect.    If you're only translating custom error messages that exist inside your project codebase you don't need to copy the LISA source  lisa_api.po  file into a  LOCALE_PATHS  folder, and can instead simply run Django's standard  makemessages  process.", 
            "title": "Adding new translations"
        }, 
        {
            "location": "/topics/internationalization/#how-the-language-is-determined", 
            "text": "You can find more information on how the language preference is determined in the  Django documentation . For reference, the method is:   First, it looks for the language prefix in the requested URL.  Failing that, it looks for the  LANGUAGE_SESSION_KEY  key in the current user\u2019s session.  Failing that, it looks for a cookie.  Failing that, it looks at the  Accept-Language  HTTP header.  Failing that, it uses the global  LANGUAGE_CODE  setting which is defined in the LISA configuration file with the  lang_django  setting.   For API clients the most appropriate of these will typically be to use the  Accept-Language  header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an  Accept-Language  header for API clients rather than using language URL prefixes.", 
            "title": "How the language is determined"
        }, 
        {
            "location": "/topics/contributing/", 
            "text": "Contributing to LISA\n\n\nThere are many ways you can contribute to LISA API.  We'd like it to be a community-led project, so please get involved and help shape the future of the project.\n\n\nCommunity\n\n\nThe most important thing you can do to help push the project forward is to be actively involved wherever possible.  Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case.\n\n\nIf you use LISA, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using LISA, or publishing a tutorial about your home automation with LISA.  Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of LISA are more difficult to understand and work with.\n\n\nCode of conduct\n\n\nPlease keep the tone polite \n professional.  First impressions count, so let's try to make everyone feel welcome.\n\n\nBe mindful in the language you choose.  As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive.  It's just as easy, and more inclusive to use gender neutral language in those situations.\n\n\nIssues\n\n\nIt's really helpful if you can make sure to address issues on the correct channel.  Usage questions should be directed to the \nGitter\n.  Feature requests, bug reports and other issues should be raised on the GitHub \nissue tracker\n.\n\n\nSome tips on good issue reporting:\n\n\n\n\nWhen describing issues try to phrase your ticket in terms of the \nbehavior\n you think needs changing rather than the \ncode\n you think need changing.\n\n\nSearch the issue list first for related items, and make sure you're running the latest version of LISA before reporting an issue.\n\n\nIf reporting a bug, then try to include a pull request with a failing test case.  This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one.\n\n\nFeature requests will often be closed with a recommendation that they be implemented outside of the core.  Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of the project, so that the focus can be on continued stability, bugfixes, and great documentation.\n\n\nClosing an issue doesn't necessarily mean the end of a discussion.  If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.\n\n\n\n\nTriaging issues\n\n\nGetting involved in triaging incoming issues is a good way to start contributing.  Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be.  Anyone can help out with this, you just need to be willing to\n\n\n\n\nRead through the ticket - does it make sense, is it missing any context that would help explain it better?\n\n\nIs the ticket reported in the correct place, would it be better suited as a discussion on gitter?\n\n\nIf the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request?\n\n\nIf the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package?\n\n\nIf a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.\n\n\n\n\nDevelopment\n\n\nTo start developing on LISA API, clone the repo:\n\n\ngit clone git@github.com:project-lisa/lisa-api.git\n\n\n\nChanges should broadly follow the \nPEP 8\n style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles.\n\n\nTesting\n\n\nTo run the tests, clone the repository, and then:\n\n\n# Setup the virtual environment\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\n\n# Run the tests\n./runtests.py\n\n\n\nTest options\n\n\nRun using a more concise output style.\n\n\n./runtests.py -q\n\n\n\nRun the tests using a more concise output style, no coverage, no flake8.\n\n\n./runtests.py --fast\n\n\n\nDon't run the flake8 code linting.\n\n\n./runtests.py --nolint\n\n\n\nOnly run the flake8 code linting, don't run the tests.\n\n\n./runtests.py --lintonly\n\n\n\nRun the tests for a given test case.\n\n\n./runtests.py MyTestCase\n\n\n\nRun the tests for a given test method.\n\n\n./runtests.py MyTestCase.test_this_method\n\n\n\nShorter form to run the tests for a given test method.\n\n\n./runtests.py test_this_method\n\n\n\nNote: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given  command line input.\n\n\nRunning against multiple environments\n\n\nYou can also use the excellent \ntox\n testing tool to run the tests against all supported versions of Python and Django.  Install \ntox\n globally, and then simply run:\n\n\ntox\n\n\n\nPull requests\n\n\nIt's a good idea to make pull requests early on.  A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission.\n\n\nIt's also always best to make a new branch before starting work on a pull request.  This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests.\n\n\nIt's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests.\n\n\nGitHub's documentation for working on pull requests is \navailable here\n.\n\n\nAlways run the tests before submitting pull requests, and ideally run \ntox\n in order to check that your modifications are compatible with both Python 2 and Python 3, and that they run properly on all supported versions of Django.\n\n\nOnce you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect.\n\n\n\n\nAbove: Travis build notifications\n\n\nManaging compatibility issues\n\n\nSometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment.  Any code that branches in this way should be isolated into the \ncompat.py\n module, and should provide a single common interface that the rest of the codebase can use.\n\n\nDocumentation\n\n\nThe documentation for LISA API is built from the \nMarkdown\n source files in \nthe docs directory\n.\n\n\nThere are many great Markdown editors that make working with the documentation really easy.\n\n\nBuilding the documentation\n\n\nTo build the documentation, install MkDocs with \npip install mkdocs\n and then run the following command.\n\n\nmkdocs build\n\n\n\nThis will build the documentation into the \nsite\n directory.\n\n\nYou can build the documentation and open a preview in a browser window by using the \nserve\n command.\n\n\nmkdocs serve\n\n\n\nLanguage style\n\n\nDocumentation should be in American English.  The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible.\n\n\nSome other tips:\n\n\n\n\nKeep paragraphs reasonably short.\n\n\nDon't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.\n\n\n\n\nMarkdown style\n\n\nThere are a couple of conventions you should follow when working on the documentation.\n\n\n1. Headers\n\n\nHeaders should use the hash style.  For example:\n\n\n### Some important topic\n\n\n\nThe underline style should not be used.  \nDon't do this:\n\n\nSome important topic\n====================\n\n\n\n2. Links\n\n\nLinks should always use the reference style, with the referenced hyperlinks kept at the end of the document.\n\n\nHere is a link to [some other thing][other-thing].\n\nMore text...\n\n[other-thing]: http://example.com/other/thing\n\n\n\nThis style helps keep the documentation source consistent and readable.\n\n\nIf you are hyperlinking to another LISA document, you should use a relative link, and link to the \n.md\n suffix.  For example:\n\n\n[authentication]: ../api-guide/authentication.md\n\n\n\nLinking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document.  When the documentation is built, these links will be converted into regular links to HTML pages.\n\n\n3. Notes\n\n\nIf you want to draw attention to a note or warning, use a pair of enclosing lines, like so:\n\n\n---\n\n**Note:** A useful documentation note.\n\n---", 
            "title": "Contributing to LISA"
        }, 
        {
            "location": "/topics/contributing/#contributing-to-lisa", 
            "text": "There are many ways you can contribute to LISA API.  We'd like it to be a community-led project, so please get involved and help shape the future of the project.", 
            "title": "Contributing to LISA"
        }, 
        {
            "location": "/topics/contributing/#community", 
            "text": "The most important thing you can do to help push the project forward is to be actively involved wherever possible.  Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case.  If you use LISA, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using LISA, or publishing a tutorial about your home automation with LISA.  Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of LISA are more difficult to understand and work with.", 
            "title": "Community"
        }, 
        {
            "location": "/topics/contributing/#code-of-conduct", 
            "text": "Please keep the tone polite   professional.  First impressions count, so let's try to make everyone feel welcome.  Be mindful in the language you choose.  As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive.  It's just as easy, and more inclusive to use gender neutral language in those situations.", 
            "title": "Code of conduct"
        }, 
        {
            "location": "/topics/contributing/#issues", 
            "text": "It's really helpful if you can make sure to address issues on the correct channel.  Usage questions should be directed to the  Gitter .  Feature requests, bug reports and other issues should be raised on the GitHub  issue tracker .  Some tips on good issue reporting:   When describing issues try to phrase your ticket in terms of the  behavior  you think needs changing rather than the  code  you think need changing.  Search the issue list first for related items, and make sure you're running the latest version of LISA before reporting an issue.  If reporting a bug, then try to include a pull request with a failing test case.  This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one.  Feature requests will often be closed with a recommendation that they be implemented outside of the core.  Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of the project, so that the focus can be on continued stability, bugfixes, and great documentation.  Closing an issue doesn't necessarily mean the end of a discussion.  If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.", 
            "title": "Issues"
        }, 
        {
            "location": "/topics/contributing/#triaging-issues", 
            "text": "Getting involved in triaging incoming issues is a good way to start contributing.  Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be.  Anyone can help out with this, you just need to be willing to   Read through the ticket - does it make sense, is it missing any context that would help explain it better?  Is the ticket reported in the correct place, would it be better suited as a discussion on gitter?  If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request?  If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package?  If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.", 
            "title": "Triaging issues"
        }, 
        {
            "location": "/topics/contributing/#development", 
            "text": "To start developing on LISA API, clone the repo:  git clone git@github.com:project-lisa/lisa-api.git  Changes should broadly follow the  PEP 8  style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles.", 
            "title": "Development"
        }, 
        {
            "location": "/topics/contributing/#testing", 
            "text": "To run the tests, clone the repository, and then:  # Setup the virtual environment\nvirtualenv env\nsource env/bin/activate\npip install -r requirements.txt\n\n# Run the tests\n./runtests.py  Test options  Run using a more concise output style.  ./runtests.py -q  Run the tests using a more concise output style, no coverage, no flake8.  ./runtests.py --fast  Don't run the flake8 code linting.  ./runtests.py --nolint  Only run the flake8 code linting, don't run the tests.  ./runtests.py --lintonly  Run the tests for a given test case.  ./runtests.py MyTestCase  Run the tests for a given test method.  ./runtests.py MyTestCase.test_this_method  Shorter form to run the tests for a given test method.  ./runtests.py test_this_method  Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given  command line input.  Running against multiple environments  You can also use the excellent  tox  testing tool to run the tests against all supported versions of Python and Django.  Install  tox  globally, and then simply run:  tox", 
            "title": "Testing"
        }, 
        {
            "location": "/topics/contributing/#pull-requests", 
            "text": "It's a good idea to make pull requests early on.  A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission.  It's also always best to make a new branch before starting work on a pull request.  This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests.  It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests.  GitHub's documentation for working on pull requests is  available here .  Always run the tests before submitting pull requests, and ideally run  tox  in order to check that your modifications are compatible with both Python 2 and Python 3, and that they run properly on all supported versions of Django.  Once you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect.   Above: Travis build notifications", 
            "title": "Pull requests"
        }, 
        {
            "location": "/topics/contributing/#managing-compatibility-issues", 
            "text": "Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment.  Any code that branches in this way should be isolated into the  compat.py  module, and should provide a single common interface that the rest of the codebase can use.", 
            "title": "Managing compatibility issues"
        }, 
        {
            "location": "/topics/contributing/#documentation", 
            "text": "The documentation for LISA API is built from the  Markdown  source files in  the docs directory .  There are many great Markdown editors that make working with the documentation really easy.", 
            "title": "Documentation"
        }, 
        {
            "location": "/topics/contributing/#building-the-documentation", 
            "text": "To build the documentation, install MkDocs with  pip install mkdocs  and then run the following command.  mkdocs build  This will build the documentation into the  site  directory.  You can build the documentation and open a preview in a browser window by using the  serve  command.  mkdocs serve", 
            "title": "Building the documentation"
        }, 
        {
            "location": "/topics/contributing/#language-style", 
            "text": "Documentation should be in American English.  The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible.  Some other tips:   Keep paragraphs reasonably short.  Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.", 
            "title": "Language style"
        }, 
        {
            "location": "/topics/contributing/#markdown-style", 
            "text": "There are a couple of conventions you should follow when working on the documentation.  1. Headers  Headers should use the hash style.  For example:  ### Some important topic  The underline style should not be used.   Don't do this:  Some important topic\n====================  2. Links  Links should always use the reference style, with the referenced hyperlinks kept at the end of the document.  Here is a link to [some other thing][other-thing].\n\nMore text...\n\n[other-thing]: http://example.com/other/thing  This style helps keep the documentation source consistent and readable.  If you are hyperlinking to another LISA document, you should use a relative link, and link to the  .md  suffix.  For example:  [authentication]: ../api-guide/authentication.md  Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document.  When the documentation is built, these links will be converted into regular links to HTML pages.  3. Notes  If you want to draw attention to a note or warning, use a pair of enclosing lines, like so:  ---\n\n**Note:** A useful documentation note.\n\n---", 
            "title": "Markdown style"
        }
    ]
}